apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "21.1.2"

    def mkfile = "NDK_APPLICATION_MK=Application.mk"
    def aarname = "all-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=ARMApplication.mk"
    //def aarname = "arm-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=ARMv7Application.mk"
    //def aarname = "armv7-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=x86Application.mk"
    //def aarname = "x86-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=MIPSApplication.mk"
    //def aarname = "mips-fmmr"

    //def mkfile = "NDK_APPLICATION_MK=x86_64Application.mk"
    //def aarname = "x86_64-fmmr"


    defaultConfig {
        minSdkVersion 12
        targetSdkVersion 23
        versionCode 7
        versionName "1.0.6"
    }
    buildTypes {
        release {
            //minifyEnabled false
            //proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets.main {
        jni.srcDirs = [] // This prevents the auto generation of Android.mk
        jniLibs.srcDir 'src/main/libs' // This is not necessary unless you have precompiled libraries in your project.
    }

    task buildFFmpeg(type: Exec, description: 'Compile FFmpeg source via NDK') {
        def dir = file('src/main/ffmpeg/build-ffmpeg.sh').absolutePath
        commandLine "$dir"
                //"--enable-openssl"
    }

    task buildNative(type: Exec, description: 'Compile JNI source via NDK') {
        def ndkDir = android.ndkDirectory
        print mkfile
        commandLine "$ndkDir/ndk-build",
                mkfile,
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                '-j', Runtime.runtime.availableProcessors(),
                'all',
                'TARGET_PLATFORM=android-21'
                'NDK_DEBUG=1'
    }

    task cleanNative(type: Exec, description: 'Clean JNI object files') {
        def ndkDir = android.ndkDirectory
        commandLine "$ndkDir/ndk-build",
                '-C', file('src/main/jni').absolutePath, // Change src/main/jni the relative path to your jni source
                'clean'
    }

    clean.dependsOn 'cleanNative'
    buildNative.dependsOn 'buildFFmpeg'

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn buildNative
    }

    libraryVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "${aarname}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
}
